import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import accuracy_score, precision_score, recall_score, classification_report
import matplotlib.pyplot as plt
from sklearn.tree import plot_tree
from sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay

# Load the dataset
df = pd.read_csv(r"D:\Collage-Stuff\Admission_Predict.csv")

# Convert 'Chance of Admit ' to binary classes
threshold = 0.7
df['Admission_Status'] = (df['Chance of Admit '] > threshold).astype(int)

# Prepare features (X) and target variable (Y)
X = df.iloc[:, 1:-2]  # Assuming the features are in columns 2 to second last
Y = df['Admission_Status']

# Split the data into training and testing sets
X_train, X_test, Y_train, Y_test = train_test_split(X, Y, train_size=0.75, random_state=40)

# Create and train the Decision Tree Classifier with increased max_depth
tree = DecisionTreeClassifier(max_depth=2)  # Increase max_depth to 4
tree.fit(X_train, Y_train)

# Make predictions on the test set
Y_pred = tree.predict(X_test)

# Calculate accuracy, precision, and recall
Accuracy = accuracy_score(Y_test, Y_pred)
precision = precision_score(Y_test, Y_pred)
recall = recall_score(Y_test, Y_pred)

print("Accuracy:", Accuracy)
print("Precision:", precision)
print("Recall:", recall)

# Print classification report
print(classification_report(Y_test, Y_pred))

# Plot the decision tree
plt.figure(figsize=(20, 12))
plot_tree(tree, feature_names=df.columns[1:-2], filled=True, rounded=True, class_names=['Not Admitted', 'Admitted'])
plt.show()

# Confusion matrix
confusion_matrix = confusion_matrix(Y_test, Y_pred)
cm_display = ConfusionMatrixDisplay(confusion_matrix=confusion_matrix, display_labels=[0, 1])
cm_display.plot(cmap=plt.cm.Blues)
plt.show()
